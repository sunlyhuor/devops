/***
    1. Clean workspace
    2. clone project
    3. configuration
    4. build image
    5. push to docker hub
    6. control ansible to run  kubernetes
***/
pipeline {
    agent any

    parameters {
        string(name: 'BRANCH_NAME', defaultValue: 'main', description: 'The Git branch to build.')
        choice(name: 'ENVIRONMENT', choices: ['dev', 'staging', 'prod'], description: 'The environment to deploy to.')
    }

    stages {
        stage('Clean workspace') {
            steps{
                cleanWs();
            }
        }
        stage('Clone project') {
            steps{
                git branch: 'api-gateway', credentialsId: 'gitlab-id', url: 'https://gitlab.com/huorgroup/khcomic/kh-comic-api.git'
            }   
        }
        stage('Configuration') {
            steps{
                withCredentials([usernamePassword(credentialsId: 'gitlab-id', passwordVariable: 'SECRET', usernameVariable: 'USER')]) {
                    sh'echo $USER'
                    sh'git clone https://$USER:$SECRET@gitlab.com/huorgroup/khcomic/khcomic-production-env.git env'
                    sh'cp env/.env ./'
                }
            }   
        }
        stage('Build images') {
            steps{
                script {
                     withCredentials([usernamePassword(credentialsId: 'docker-hub-id', passwordVariable: 'PASS', usernameVariable: 'USER')]) {
                        sh'docker login -u $USER -p $PASS'
                        sh '''
                             docker build -t $USER/api-comic-gateway:latest -f Dockerfile.api .
                             docker build -t $USER/api-comic-auth:latest -f Dockerfile.auth .
                             docker build -t $USER/api-comic-book:latest -f Dockerfile.book .
                             docker build -t $USER/api-comic-transaction:latest -f Dockerfile.transaction .
                             docker push $USER/api-comic-gateway:latest
                             docker push $USER/api-comic-auth:latest
                             docker push $USER/api-comic-book:latest
                             docker push $USER/api-comic-transaction:latest
                             docker rmi -f $USER/api-comic-gateway:latest
                             docker rmi -f $USER/api-comic-auth:latest
                             docker rmi -f $USER/api-comic-book:latest
                             docker rmi -f $USER/api-comic-transaction:latest
                        '''
                    }
                }
            }   
        }
        stage('Clone project k8s'){
            steps{
                withCredentials([usernamePassword(credentialsId: 'github-id', passwordVariable: 'SECRET', usernameVariable: 'USER')]) {
                    sh'''
                        if [ -d "$HOME/devops" ]; then
                            rm -r $HOME/devops
                            git clone https://$USER:$SECRET@github.com/sunlyhuor/devops.git $HOME/devops
                        else
                            git clone https://$USER:$SECRET@github.com/sunlyhuor/devops.git $HOME/devops
                        fi

                    '''
                }
            }
        }
        stage('Deploy with ansible'){
            steps{
                sh'''
                    ansible-playbook -i $HOME/devops/ansible/hosts.ini $HOME/devops/ansible/control.yaml --ssh-common-args='-o StrictHostKeyChecking=no'
                '''
            }
        }
    }    

}